#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/amqp_utils/command'

class QueueDeleteCommand < AmqpUtils::Command
  def prepare_options(options)
    options.banner %Q{
    |Deletes the supplied queues.
    |
    |  #{command_name} <queue> [<another queue> ...]
    |
    | Delete queue options:
    }.margin
    options.opt :passive, "Queue is marked as passive",
      :short => :none, :default => false
    options.opt :durable, "Queue is marked as durable",
      :short => :none, :default => false
    options.opt :exclusive, "Queue is marked as exclusive",
      :short => :none, :default => false
    options.opt :auto_delete, "Queue is deleted when all consumers have finished using it",
      :short => :none, :default => false
    options.opt :nowait, "Client should not wait for a reply method",
      :short => :none, :default => true
  end

  def validate
    raise "need at least one queue name" unless args[0] && !args[0].empty?
  end

  def execute
    @queues = args

    queues_options = {}
    %w(passive durable exclusive auto_delete nowait).each do |option|
      queues_options[option.to_sym] = options[option.to_sym]
    end

    def @queues.delete_or_stop(options)
      queue = pop
      if queue
        puts "Deleting #{queue}..."
        MQ.new.queue(queue, options).delete
        EM.next_tick { delete_or_stop(options) }
      else
        AMQP.stop { EM.stop }
      end
    end

    EM.next_tick { @queues.delete_or_stop(queues_options) }
  end
end

QueueDeleteCommand.run
